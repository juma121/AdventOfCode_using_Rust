fn main() {
    //let vec: = vec![edite]

    let original_str = "....#..#.......#........#....#.
    ..##.#.#.#...................#.
    ....#.#.##..#....#......#......
    .........#.#......##.....#.....
    ..........#.###.##...##........
    #....#.#.......##.....#..#.....
    #...........#.#...#..#..##.##..
    ......##.............#.....#...
    ..##..........###..#.#..##.....
    ...........#........#......##..
    ..##...........##..............
    ..#......###.#.....#.#.#.......
    ..#..#..#..........#.#....#....
    .#.....##......................
    ...#...##..#...#.........#..##.
    .#......#..#..#...#......#.##..
    ..##.##.......#..#.....#..#...#
    ..............#..#..#...#......
    ...#...#....##.....#...#...#...
    ......................#...#....
    .......#......#...#..##...#.#..
    ##......#..#.....#....#.....#..
    ....#.#.##.#.#....#............
    #.....##.............#.........
    ..........#...........#.#.....#
    ...#...##....#.#........#..#...
    ................#..#.##.##....#
    ......#...#...##...##....#.....
    ##....#..#..#...#..#...........
    #..................#...#.#..#..
    ....##....##.#....#..#......#..
    .....#...........#.........##..
    ..#..............#.........#..#
    ......##....................#..
    ..#.....###...####...#...#.##..
    #..#.#......#.....#.......#.#..
    ##.#.........######........#...
    ..#....###...#.#..............#
    .....#..............#.........#
    ....#......#..#.........#...#..
    .....###.....#.###.......###...
    #.#..#.....#....##...#........#
    ..##....#..#.........#...#.#...
    ..#..##.............#....#.#.#.
    ..##.#..#.#.#.........##.......
    #.#..#.........#..............#
    #..#.........###.......#.#..#.#
    .............#...#....#......#.
    ..........#.#...##.###.....#.#.
    ..#.....#......................
    .......#......###.#.......#....
    ....#....#.........#...###.#.#.
    .#.............#............#..
    ....#..#.............#.#....#..
    ....#.....#...#...##.#.........
    ..#...#...#..................#.
    ........#....#.....#...........
    .....##.......#...#.#..#..#....
    ...#............#..#.#.........
    ......................#........
    ....#......#.....#.#....#......
    .....#..#.........#.........##.
    ...............#.....#....##...
    ...#.#.#...#..#...........#....
    .#....###......##...#.#.#.#....
    .....#...#....####....##.......
    ..#......#..#.....##.#...#.....
    ...#.##..#....#..##.....#......
    ..#......#...#...##.....#...#..
    ......#.....#........#.........
    ..#.#....#..............##....#
    ..#...#......##............#...
    .##.#.......#.......#......#..#
    ...##.##...#.....#.......#..#..
    ......##..#....#.......#.......
    .....#..#..#.#.....#.....#...##
    ##.#...#.#.#.....#...#.#.#.##.#
    ...................###...#..#..
    .#.....##.#......#........#....
    .##...##.#..........#...#....#.
    ......#..............#.#......#
    ...#.......#..#...........#....
    .###...#............##..#...##.
    ##..#.#.........#............#.
    #...#.#......#.##...........#.#
    .#.#...#........#......##......
    ....#...#...#.....#...#....#...
    ...##...........##.........#...
    .........#...#..###............
    ..#........#...............#...
    .............#....#.#..........
    ........#......#.#.......#....#
    .................#....##.#.##..
    ..#...##........#..............
    #..#........#...#....#.........
    ......#.#.....#.....#..###.#..#
    ....#............#...#.#.#.....
    ............#..........#...#...
    ..........#....##.#.........#..
    ..............#...#...#..#.....
    #......#....#..##....#......##.
    ...#....#.................#....
    .#.##.............#...#....##..
    ....#..#.........#..#....#....#
    ..#.....##..#......#.#..#......
    ..#..#.....#........#...#..#..#
    .........##.#.##.#.......#....#
    ..#.......##.##...#.....#.....#
    .............##...#...........#
    ..#......#..#....#...#..#.##...
    ....#........#......#.........#
    .......#........#..#.#.#..##..#
    ..#......#...........##...#....
    .....#..#.#...#..............##
    .#..#......#......#........#..#
    ...##...............#....#.....
    .......#...#.......##..#.......
    .....#....#...#...#..#.....#.#.
    ...#.........#.....#...........
    ...#.....###....#....#...#...#.
    #..#.....#.........#.........#.
    .................#.#.....#....#
    ...........#..........#..#.....
    ........#.#....#...#..#.....###
    #............................#.
    ..##..#..#...##.........#......
    ......##....#.#...#.........#..
    ......#..##.#......#..#.....#..
    ...#.......##....#.#....#......
    .....#........#...#............
    #.......#...#.........#......#.
    ......#......#....#..#.........
    ..#.#........#..#......#....#..
    .#..#.#..........##....###.#..#
    ...#....#.##..#...#....#.......
    ..#.....#......#.###.......#...
    ..............................#
    .....#..#...#...........#......
    .##...#....##....#.#.#.#....#.#
    .#...#....#...#........#.......
    ....#............#...##..#.....
    ....##..#....#....#.....#....##
    .............#..##.#.#.#.......
    #.......#.#.#.......#..#..#....
    #..#...........#.......###..#..
    .#..##.#.....#........#........
    ..#.#.......#............#..#..
    ...........#..#............##.#
    .....#.......#.....#..#.##.#..#
    ......#......##.....##.........
    ..##.#..#.#..#..#..............
    .....#.............##...#.#.##.
    .#......##.#..........#........
    ..#..#.........#.....#.#.#.....
    ..#.....#.......#.....#..#.....
    #.#.#........#.#...#....#..#...
    .#.#.......#............#....#.
    ......#..................#....#
    .#...#...#.....#.#..........#..
    .#..##....####...........#.#...
    ..##.....#...#.#....#....#.....
    #.....................#....#.#.
    ###..###.#.#...........#.....##
    ......#......#..........#......
    ...#......#.##.....#......###.#
    .............#..#.#...........#
    ..#.............#.#..#.....#...
    ...#...............#....##...##
    ........#.................#....
    #..###.....#.......##.#......##
    ....#.#..............#.........
    #..........#.....#..##...#.....
    ................#...#..#....#..
    ..#...#....##..........#.#.....
    ......#........##......#..#...#
    ...#....#..#.....#.......#...#.
    .#.....#..#...#..###....#......
    ....#.........#....#.#.#.....#.
    #.#....#...#....#.....#..##....
    .......#..#..#..........#...#..
    ..#.#..#.....##.#.#............
    ..#....#.....#..##..#..#.#..#..
    ..#.##.#...........#...#..#....
    .........#........#...#........
    ..#.#.#.......##.........#.##..
    #.#..........#.#...#..#......##
    .#..#....................#.#...
    .##......#................#...#
    ..##.#######......#....#.......
    ....#...##.#....#.#............
    .##....#...##.......#...#..#...
    ...........#...#...#...#..#....
    #...#.....#.......#....#.....#.
    .............#.................
    ........#.#.......#...#.#.#....
    ..............#............#.#.
    ......#......##..#.......#....#
    ##...#..................#......
    .....#......###.....#.......#.#
    .....#.#............#.#........
    ..#.#..#............#....#.#...
    ##.#.###.#.#.#..#......#.......
    ...##........#..#.....#.#.#..#.
    ##......#.##.....####..#.......
    ............#...#..#...#..#....
    ...#..#................##.#..#.
    .#....#.#...........##.#.#...#.
    ####..#...........#.......###..
    .......#.................#.....
    .......#....#.......##....#....
    ..#.........#...#....#.........
    ..........#..#...#.#...##..#...
    ....##..........#.........##...
    #.........##..#.#..#.......#...
    .#...........#....#...#...#.#..
    ....#..#.....#...##....#.#....#
    .#....#.....#......#..##.##.#.#
    #......#..#.......##...........
    ...#..#...#.#.................#
    ......#.......##....##.#......#
    ....#....#.#.#.....#....#....#.
    ..#..........#.##...##..#......
    ...#..#........#....#.#..#....#
    ##.......#........#..........#.
    .#........#.......#...#..##...#
    ..#..#..##..#...........#...###
    ..#......#..........#..##......
    .#.....#..#.#...#...#.........#
    #.#......##....................
    #...#.....##...........#.......
    ........#...#....#.......##....
    ...#.##...#....#....#..#..#..#.
    ...#..#......##....#..#..##....
    #...#..........#.#.............
    ##..#........##.....#.........#
    .....#......#.#...###..#.......
    #..##.#..#.###...........##..#.
    .....#....#..........#.......#.
    ##.........##.#................
    ....#.........#............##..
    .......#........#......#..#..##
    .#...#...##..#....#..#.........
    .............#...#.#........#..
    ......#..#...#..#.###..#.......
    ........##.#..#.#..#..#........
    #.##..#..#..........#...##..###
    .##...#............#.#...##..#.
    ................#....##.#...#..
    #.................#..........#.
    ...#..#..#.....................
    ..#...##.#.#...................
    .....#...#.......#............#
    ..#..#.........#..##.#..#.#...#
    .....#.#.....#.#.......#.....#.
    ..................#..#....#.#..
    ..#.....###.##.......##....#.#.
    ..#......##.......#....##.#....
    ....#...................#..##.#
    .......#....#.##.#.......#....#
    ..#...#......#..#...###....#.#.
    ..#..#.#....#...........#.....#
    .....#..#..#.......#........#..
    ......#.##.#......#...........#
    #...#....#.#..##.##..#..##.....
    #...##....#.#...##........#....
    ..##............#.#.#..........
    ....#.....#.#..#.......#..#....
    #..#.#.....#..#..##...#..##....
    ...##........#...........#...#.
    .####......#..##.........#.#...
    .......#.......................
    .................#....#..#.....
    .........##......###...........
    .##......#.#.#....#.#...#..###.
    ....#......##.###.#.#..#.......
    ..........#.......##......##..#
    ...........#.......#..##.......
    .....###..#..............##....
    ........##..#.#.#......#....#..
    #....#.........................
    ...........#...............##..
    ......#.................#......
    .....#...#..##...##...#...#....
    ..........#.#...##.####......#.
    ..#.#.....##....#...........#..
    ..........#....#..#....##...#..
    .#.......#..##...#...#.....#...
    ...##....#.#......##...##....#.
    #.......#.......#.##.#...#.#...
    #...#..................#......#
    ..#.......#...............#..##
    #.....#..................#....#
    .##.....#.....#......####.....#
    ..#........#...#.#........#...#
    ..##.....#....#...#...........#
    ..#..#.....##..#.##...#........
    ..........###..#....##.....#...
    ...#...#....#.##.#...#.#.......
    ..##......#.......#.......##...
    ............#............#.....
    .##....#.........#.............
    ....#....#....#........##...#.#
    .......##......................
    ..........#.#.................#
    ......##.#...#.........#.....#.
    ..#...#......#..#.............#
    ..........###.#..#.#...#..#..#.
    #..#.#..#....##...#...#.#...#..
    .#........##...#......#.##.....
    ...###.#...##..............##..
    #.#.#...#...#..#....#.#..#.....
    .#.#.##..#....#......#.#.......
    ...#..#.#....##...........#..#.
    .....##..##......#.#...........
    ......#.....#....####....#.....
    .#.#.#...#..#..#...........#...
    .....#......................#..
    .........#.........#.###.##....
    .....#......##..........#......
    ..#...........##...........#...
    ..............#.........#.....#
    ..#....#..#...#...##.#.........
    .#.#.#....#..........#.........";

    let mut width: i32 = 31;
    let mut height: usize = 0;
    //dbg!(&original_str);

    let edit_str = original_str.replace("\n", "").replace(" ", "");
    let height = calculate_height(width, edit_str.as_str());

    let c: char = 'x';
    let multi_arr = vec![vec![c; 31 as usize]; 323 as usize];
    let filled_arr = fill_arr(multi_arr, &edit_str);

    let mirrored_arr = mirror_arr_1000_times(filled_arr);

    let visited_trees = traverse(&mirrored_arr, 3); //257
    println!("Trees visited: {}", visited_trees);

    let trees_found1 = traverse(&mirrored_arr, 1); //61
    let trees_found5 = traverse(&mirrored_arr, 5); //64
    let trees_found7 = traverse(&mirrored_arr, 7); //47
    let trees_found1_vertical2 = traverse_vertically_skip_1(&mirrored_arr, 1, 2); //37

    let path_product: i64 =
        visited_trees * trees_found1 * trees_found5 * trees_found7 * trees_found1_vertical2;
    println!("Product of all paths: {}", path_product);
}

fn traverse_vertically_skip_1(
    arr: &Vec<Vec<char>>,
    mut skip_index: usize,
    mut vertical_skip: usize,
) -> i64 {
    let mut tree_counter = 0;
    let mut my_iter = arr.iter();
    //Loop should start on second row to work properly, therefore .next() is called one time

    let original_skip_index = skip_index;
    let original_vertical_skip_index = vertical_skip;

    //having to clone the iterator very often. :/ There is probably better solution.
    while let Some(v) = my_iter.clone().skip(vertical_skip).next() {
        if v.iter().skip(skip_index).next().unwrap().eq(&'#') {
            tree_counter += 1;
            skip_index += original_skip_index;
        } else {
            skip_index += original_skip_index;
        }
        vertical_skip += original_vertical_skip_index;
    }

    tree_counter
}

// this function traverses the matrix using an iterator with a horizontal skip index
fn traverse(arr: &Vec<Vec<char>>, mut skip_index: usize) -> i64 {
    let mut tree_counter = 0;
    let mut my_iter = arr.iter();
    //Loop should start on second row to work properly, therefore .next() is called one time
    my_iter.next();
    let original_skip_index = skip_index;

    while let Some(v) = my_iter.next() {
        if v.iter().skip(skip_index).next().unwrap().eq(&'#') {
            tree_counter += 1;
            skip_index += original_skip_index;
        } else {
            skip_index += original_skip_index;
        }
    }

    tree_counter
}
//Mirrors the rows of the arr sideways into a bigger buffer arr
fn mirror_arr_1000_times(filled_arr: Vec<Vec<char>>) -> Vec<Vec<char>> {
    let c: char = 'x';

    let buffer_arr: Vec<Vec<char>> = vec![vec![c; 31000 as usize]; 323 as usize];

    let mut i = 0;
    let mut outer_buffer_index = 0;
    let mut inner_index = 0;
    let mut buf: Vec<Vec<char>> = vec![vec![c; 31000 as usize]; 323 as usize];

    for row in &buffer_arr {
        for _column in row {
            buf[i][outer_buffer_index] = filled_arr[i][inner_index];

            if inner_index == 30 {
                inner_index = 0;
            } else {
                inner_index += 1;
            }
            outer_buffer_index += 1;
        }
        i += 1;
        outer_buffer_index = 0;
    }

    buf
}

// fills the array with values out of a string. Hard-coded :/
fn fill_arr(multi_arr: Vec<Vec<char>>, edit_str: &str) -> Vec<Vec<char>> {
    let mut i = 0;
    let mut j = 0;
    let mut str_iter = edit_str.chars();
    let c: char = 'x';
    let mut filled_arr: Vec<Vec<char>> = vec![vec![c; 31]; 323];
    for row in multi_arr {
        for _slot in row {
            filled_arr[i][j] = str_iter.next().unwrap();
            j += 1;
        }
        j = 0;
        i += 1;
    }

    filled_arr
}
// calculate the height. Hard coded :/
fn calculate_height(w: i32, data: &str) -> i32 {
    let length = data.len();
    let rows = length / w as usize;
    rows as i32
}
